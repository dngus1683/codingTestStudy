// 거울 설치
// N x N 의 크기를 갖는 집에서 문이 2개 있다고 하자. 방 안에 거울을 설치하여 문에서 다른 문을 볼 수 있는 거울의 최소 수를 구하라.
// 이때, 거울을 설치할 때는 45도 기울어진 방향으로 설치해야 한다.


// 내 답안1
#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>

#define INF 987654321
#define MAX_N 51

using namespace std;

typedef struct node
{
    int i;
    int j;
    int dir;
    int dist;
}node;

bool operator<(node t, node u)
{
    return t.dist > u.dist;
}
vector<node> graph[MAX_N * MAX_N];
vector<node> SEpoint;
char map[MAX_N][MAX_N];
int dx[4] = {-1, -1, 1, 1};
int dy[4] = {-1, 1, -1, 1};
int d[MAX_N];

void dijkstra(int start)
{
    priority_queue<node> pq;
    pq.push({start, 4, 0});

    d[start] = 0;

    while(!pq.empty())
    {
        node now = pq.top();
        pq.pop();

        if(d[now.idx] < now.dist) continue;
        for(int i=0; i<graph[now.idx].size(); i++)
        {
            int cost = d[now.idx] + graph[now.idx][i].dist;
            if(now.dir == graph[now.idx][i].dir && graph[now.idx][i].)
            if(cost < d[graph[now.idx][i].idx])
            {
                d[graph[now.idx][i].idx] = cost;
                pq.push({-cost, graph[now.idx][i].idx});
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int N;
    cin >> N;

    for(int i=0; i<N; i++)
    {
        cin >> map[i];

        for(int j=0; j<N; j++)
        {
            if(map[i][j] == '#') SEpoint.push_back({i, j, 4, 0});
            else if(map[i][j] == '*') continue;
            for(int k=0; k<4; k++)
            {
                if(i+dy[k] < 0 || i+dy[k] >= N || j+dx[k] < 0 || j+dx[k] >= N) continue;

                int dist = 1;
                if(map[i][j] == '#' || map[i][j] == '.')  dist = 0;

                graph[IdxNow].push_back({IdxNext, k, dist});
            }
        }
    }

    fill(d, d+MAX_N, INF);
    dijkstra(SEpoint[0]);

    cout << d[SEpoint[1]] << '\n';
}
