// 별 찍기 - 10
// 재귀적인 패턴으로 별을 찍어 보자. N이 3의 거듭제곱(3, 9, 27, ...)이라고 할 때, 크기 N의 패턴은 N×N 정사각형 모양이다.
// 크기 3의 패턴은 가운데에 공백이 있고, 가운데를 제외한 모든 칸에 별이 하나씩 있는 패턴이다.
// ***
// * *
// ***
// N이 3보다 클 경우, 크기 N의 패턴은 공백으로 채워진 가운데의(N / 3)×(N / 3) 정사각형을 크기 N / 3의 패턴으로 둘러싼 형태이다.예를 들어 크기 27의 패턴은 예제 출력 1과 같다.
// ***************************
// * ** ** ** ** ** ** ** ** *
// ***************************
// **   ******   ******   ***
// * *   * ** *   * ** *   * *
// ***   ******   ******   ***
// ***************************
// * ** ** ** ** ** ** ** ** *
// ***************************
// *********         *********
// * ** ** *         * ** ** *
// *********         *********
// ***   ***         ***   ***
// * *   * *         * *   * *
// ***   ***         ***   ***
// *********         *********
// * ** ** *         * ** ** *
// *********         *********
// ***************************
// * ** ** ** ** ** ** ** ** *
// ***************************
// ***   ******   ******   ***
// * *   * ** *   * ** *   * *
// ***   ******   ******   ***
// ***************************
// * ** ** ** ** ** ** ** ** *
// ***************************


// 내 답안1
#include <iostream>

#define MAX_N 6562

using namespace std;

int N = 0;
char stars[MAX_N][MAX_N];

void func(int I, int J, int length)
{
	if (length == 1)
	{
		stars[I][J] = '*';
		return;
	}
	for (int ii = 0; ii < 3; ii++)
	{
		for (int jj = 0; jj < 3; jj++)
		{
			if (ii == 1 && jj == 1) continue;
			func(I + (length / 3) * ii, J + (length / 3) * jj, length / 3);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	
	cin >> N;

	func(0, 0, N);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (stars[i][j] == '*')
				cout << stars[i][j];
			else
				cout << ' ';
		}
		cout << '\n';
	}
}